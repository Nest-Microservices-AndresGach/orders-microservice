// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELED
}

model Order {
  id          String @id @default(uuid())
  totalAmount Float
  totalItems  Int

  //*Acá se podrian agregar cupones de descuento y caracteristicas extra de una orden

  status         OrderStatus @default(PENDING)
  paid           Boolean     @default(false)
  paidAt         DateTime?
  stripeChargeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItem    OrderItem[]
  OrderReceipt OrderReceipt?
}

model OrderItem {
  id        String @id @default(uuid())
  productId Int
  quantity  Int
  price     Float //* Se deja así y no se relaciona con la tabla actual de precios porque si este cambia, puede que haya vendido el producto con otro precio y eso tiene que quedar con registro

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model OrderReceipt {
  id String @id @default(uuid())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  receiptUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
